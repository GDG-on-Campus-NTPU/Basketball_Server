generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model LoginEmailfrequency {
  email         String @unique
  requestTime   DateTime
  times         Int @default(1)
}

model LoginToken {
  email         String
  token         Int
  time          DateTime
  @@unique([email, token])
  @@index([time])
}

model User {
  id    Int    @id @default(autoincrement())
  email String @unique
  player Player?
  name String @default("使用者")
}

model Player {
  id    Int    @id @default(autoincrement())
  name  String
  number Int //背號
  player_to_contest Player_to_contest[]
  teamId Int //外鍵
  userId Int @unique
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
}

model Performance{
  id    Int    @id @default(autoincrement())
  starting Boolean
  playerId Int //背號
  name String
  two_point_made Int 
  two_point_missed Int
  three_point_made Int
  three_point_missed Int
  free_throw_made Int
  free_throw_missed Int
  rebound_offensive Int //進攻籃板
  rebound_defensive Int //防守籃板
  block Int //阻攻
  steal Int //抄截
  assist Int
  foul Int //犯規
  mistake Int
  score Int //總分
  player_to_contest Player_to_contest?// 一對一的可選關聯
}

model Team{
  id    Int    @id @default(autoincrement())
  name String @unique
  player Player[]
}

model Contest{
  id    Int    @id @default(autoincrement())
  teamname String
  opposingTeam String
  winTeam String
  date Int
  player_to_contest Player_to_contest[]
}

model Player_to_contest{
  id    Int    @id @default(autoincrement())
  playerId     Int
  player       Player      @relation(fields: [playerId], references: [id], onDelete: Cascade)
  performanceId Int? @unique
  performance   Performance? @relation(fields: [performanceId], references: [id], onDelete: Cascade)
  contestId    Int
  contest      Contest      @relation(fields: [contestId], references: [id], onDelete: Cascade)
}
